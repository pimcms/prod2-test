from netforce.model import fields,get_model
from netforce import utils
import json
from decimal import *
import re
try:
    import xlsxwriter
except:
    print("Warning: failed to import xlsxwriter")
try:
    from fpdf import FPDF
except:
    print("Warning: failed to import fpdf")
try:
    from colour import Color
except:
    print("Warning: failed to import colour")
import dateutil

def get_fields_nfjson(layout_str):
    fields=[]
    layout=json.loads(layout_str)
    cells=layout.get("cells",[])
    for cell in cells:
        if cell.get("type")=="field":
            field=cell.get("value")
            if field:
                fields.append(field)
        elif cell.get("type")=="text":
            def _replace_expr(m):
                path=m.group(1)
                if path[0]!="_":
                    fields.append(path)
            val=cell.get("value")
            if val:
                re.sub("\{(.*?)\}",_replace_expr,val) # XXX: don't use sub
    return fields

def cell_name_to_coords(name):
    col_no=ord(name[0])-ord("A")
    row_no=int(name[1:])-1
    return [row_no,col_no]

# XXX: remove this
def nfjson_get_row(layout,row_no):
    name=str(row_no+1)
    for row in layout.get("rows"):
        if row.get("name")==name:
            return row
    return {
        "name": name,
    }

def get_path_val(data,path):
    n,_,rpath=path.partition(".")
    v=data.get(n)
    if not v or not rpath:
        return v
    return get_path_val(v,rpath)

def get_field_by_path(model,path):
    n,_,rpath=path.partition(".")
    m=get_model(model)
    f=m._fields.get(n)
    if not f:
        raise Exception("Field not found: %s.%s"%(model,n))
    if not rpath:
        return f
    return get_field_by_path(f.relation,rpath)

current_page=0

def render_template_nfjson_pdf(layout_str,data_list,model):
    print("render_template_nfjson_pdf")
    if isinstance(data_list,dict):
        data_list=[data_list]
    layout=json.loads(layout_str)
    if layout.get("format"):
        fmt=layout["format"]
    else:
        fmt="A4"
    pdf=FPDF(format=fmt)
    pdf.add_font("Loma","","/usr/share/fonts/truetype/tlwg/Loma.ttf",uni=True)
    pdf.add_font("Loma","B","/usr/share/fonts/truetype/tlwg/Loma-Bold.ttf",uni=True)
    cols=layout.get("cols")
    if not cols:
        raise Exception("Missing cols")
    rows=layout.get("rows")
    if not rows:
        raise Exception("Missing rows")
    cells=layout.get("cells") or []
    pdf.set_margins(0,0,0)
    pdf.set_auto_page_break(False)
    line_width=0.2
    for data in data_list:
        pdf.add_page()
        global current_page
        current_page=1
        def _render_row(data,model,tmpl_row_no,out_row_no,out_top,prefix=None):
            print("_render_row",model,tmpl_row_no,out_row_no,out_top,prefix) 
            row=rows[tmpl_row_no]
            if out_top+row["height"]>1000-layout["margin_bottom"]:
                print("="*80)
                print("new_page")
                pdf.add_page()
                global current_page
                current_page+=1
                out_top=layout["margin_top"]
            def _get_num_lines(s,cell_w):
                sw=pdf.get_string_width(s)
                if sw<=cell_w:
                    n=1
                else:
                    n=2 # XXX
                return n
            max_num_lines=1
            for cell in cells: # XXX: get row height
                if not cell.get("type"):
                    continue
                name=cell["name"]
                res=cell_name_to_coords(name)
                row_no=res[0]
                col_no=res[1]
                if row_no!=tmpl_row_no:
                    continue
                #print("cell name",name)
                col=cols[col_no]
                row=rows[row_no]
                x0=col["left"]*pdf.w/1000
                #print("x0",x0,"y0",y0)
                colspan=cell.get("colspan") or 1
                span_col_no=min(col_no+colspan-1,len(cols)-1)
                if span_col_no < len(cols)-1:
                    x1=cols[span_col_no+1]["left"]*pdf.w/1000-line_width
                else:
                    x1=(cols[span_col_no]["left"]+cols[span_col_no]["width"])*pdf.w/1000
                rowspan=cell.get("rowspan") or 1
                font_size=cell.get("font_size") or 7
                if cell.get("bold"):
                    pdf.set_font('Loma', 'B', font_size)
                else:
                    pdf.set_font('Loma', '', font_size)
                cell_type=cell["type"]
                if cell_type=="field":
                    field=cell.get("value")
                    if prefix and field:
                        field=field[len(prefix):]
                    val=get_path_val(data,field) if field else ""
                    if val is None:
                        val=""
                    elif isinstance(val,Decimal):
                        val=utils.format_money(val)
                    else:
                        val=str(val)
                    if val:
                        fmt=cell.get("format")
                        if fmt=="0,0": # XXX
                            val=str(int(float(val))) # XXX
                        elif fmt=="DD/MM/YYYY": # XXX
                            val=dateutil.parser.parse(val).strftime("%d/%m/%Y")
                    num_lines=_get_num_lines(val,x1-x0)
                    if num_lines>max_num_lines:
                        max_num_lines=num_lines
            print("max_num_lines",max_num_lines)
            for cell in cells:
                if not cell.get("type"):
                    continue
                name=cell["name"]
                res=cell_name_to_coords(name)
                row_no=res[0]
                col_no=res[1]
                if row_no!=tmpl_row_no:
                    continue
                #print("cell name",name)
                col=cols[col_no]
                row=rows[row_no]
                x0=col["left"]*pdf.w/1000
                y0=out_top*pdf.h/1000
                pdf.set_xy(x0,y0)
                #print("x0",x0,"y0",y0)
                colspan=cell.get("colspan") or 1
                span_col_no=min(col_no+colspan-1,len(cols)-1)
                if span_col_no < len(cols)-1:
                    x1=cols[span_col_no+1]["left"]*pdf.w/1000-line_width
                else:
                    x1=(cols[span_col_no]["left"]+cols[span_col_no]["width"])*pdf.w/1000
                rowspan=cell.get("rowspan") or 1
                if row.get("extend_to"): 
                    h=row["extend_to"]-out_top
                    if h<=0:
                        continue
                else:
                    h=row["height"]*rowspan*max_num_lines
                y1=(out_top+h)*pdf.h/1000-line_width
                print("  cell ",name,"x0",x0,"y0",y0,"x1",x1,"y1",y1,"w",pdf.w,"h",pdf.h)
                border=""
                if cell.get("border_left"):
                    border+="L"
                if cell.get("border_right"):
                    border+="R"
                if cell.get("border_top"):
                    border+="T"
                if cell.get("border_bottom"):
                    border+="B"
                align="L"
                res=cell.get("align")
                if res:
                    if res=="right":
                        align="R"
                    elif res=="center":
                        align="C"
                font_size=cell.get("font_size") or 7
                if cell.get("bold"):
                    pdf.set_font('Loma', 'B', font_size)
                else:
                    pdf.set_font('Loma', '', font_size)
                color=cell.get("color")
                if color:
                    c=Color(color)
                    pdf.set_text_color(int(c.red*255),int(c.green*255),int(c.blue*255))
                else:
                    pdf.set_text_color(0)
                cell_type=cell["type"]
                if cell_type=="text":
                    val=cell.get("value") or ""
                    def _replace_expr(m):
                        global current_page
                        path=m.group(1)
                        if prefix:
                            path=path[len(prefix):]
                        if path[0]=="_":
                            if path=="_current_page":
                                v=current_page
                            elif path=="_total_pages":
                                #v=total_pages
                                v=current_page # XXX
                            else:
                                raise Exception("Invalid variable: %s"%path)
                        else:
                            v=get_path_val(data,path)
                        return str(v)
                    val=re.sub("\{(.*?)\}",_replace_expr,val)
                    color=cell.get("bg_color")
                    if color:
                        c=Color(color)
                        pdf.set_fill_color(int(c.red*255),int(c.green*255),int(c.blue*255))
                    else:
                        pdf.set_fill_color(r=255,g=255,b=255)
                    pdf.cell(x1-x0, y1-y0, "", border=border, fill=True)
                    y=y0+1 # XXX
                    line_h=3 # XXX
                    for line in val.split("\n"):
                        pdf.set_xy(x0,y)
                        pdf.cell(x1-x0, line_h, line, align=align)
                        y+=line_h
                elif cell_type=="field":
                    field=cell.get("value")
                    if prefix and field:
                        field=field[len(prefix):]
                    val=get_path_val(data,field) if field else ""
                    if val is None:
                        val=""
                    elif isinstance(val,Decimal):
                        val=utils.format_money(val)
                    else:
                        val=str(val)
                    if val:
                        fmt=cell.get("format")
                        if fmt=="0,0": # XXX
                            val=str(int(float(val))) # XXX
                        elif fmt=="DD/MM/YYYY": # XXX
                            val=dateutil.parser.parse(val).strftime("%d/%m/%Y")
                    color=cell.get("bg_color")
                    if color:
                        c=Color(color)
                        pdf.set_fill_color(int(c.red*255),int(c.green*255),int(c.blue*255))
                    else:
                        pdf.set_fill_color(r=255,g=255,b=255)
                    #pdf.cell(x1-x0, y1-y0, val, border=border, align=align, fill=True)
                    pdf.multi_cell(x1-x0, y1-y0, val, border=border, align=align)
                elif cell_type=="image":
                    val=cell.get("value")
                    path=utils.get_file_path(val)
                    #pdf.image(path,w=x1-x0,h=y1-y0)
                    pdf.image(path,h=y1-y0) # XXX
            if row.get("extend_to"): 
                h=max(0,row["extend_to"]-out_top)
            else:
                h=row["height"]*max_num_lines
            out_top+=h
            return out_top
        out_row_no=0
        out_top=layout["margin_top"]
        for tmpl_row_no in range(len(rows)):
            row=rows[tmpl_row_no]
            if row.get("field"):
                field=row["field"]
                val=get_path_val(data,field) or ""
                try:
                    f=get_field_by_path(model,field)
                    rmodel=f.relation
                except: # XXX
                    rmodel=None
                for rdata in val:
                    out_top=_render_row(rdata,rmodel,tmpl_row_no,out_row_no,out_top,field+".")
                    out_row_no+=1
            else:
                out_top=_render_row(data,model,tmpl_row_no,out_row_no,out_top)
                out_row_no+=1
    pdf.output("/tmp/report.pdf","F")
    out=open("/tmp/report.pdf","rb").read()
    return out

def render_template_nfjson_xlsx(layout_str,data,model):
    workbook=xlsxwriter.Workbook("/tmp/report.xlsx")
    sheet=workbook.add_worksheet()
    layout=json.loads(layout_str)
    num_cols=layout.get("num_cols") or 1
    num_rows=layout.get("num_rows") or 1
    def _render_row(data,model,tmpl_row_no,out_row_no,prefix=None):
        sheet.set_column(0,num_cols-1,15)
        cells=layout.get("cells") or []
        for cell in cells:
            name=cell["name"]
            print("cell name",name)
            res=cell_name_to_coords(name)
            row_no=res[0]
            col_no=res[1]
            if row_no!=tmpl_row_no:
                continue
            colspan=cell.get("colspan") or 1
            rowspan=cell.get("rowspan") or 1
            fmt=workbook.add_format()
            if cell.get("bold"):
                fmt.set_bold()
            if cell.get("align"):
                fmt.set_align(cell["align"])
            if cell.get("border_top"):
                fmt.set_top()
            if cell.get("border_bottom"):
                fmt.set_bottom()
            if cell.get("border_left"):
                fmt.set_left()
            if cell.get("border_right"):
                fmt.set_right()
            if colspan>1 or rowspan>1:
                sheet.merge_range(out_row_no,col_no,out_row_no+rowspan-1,col_no+span-1,"",fmt)
            cell_type=cell.get("type") or "text"
            if cell_type=="text":
                val=cell.get("value")
                sheet.write(out_row_no,col_no,val,fmt)
            elif cell_type=="field":
                field=cell.get("value")
                if prefix:
                    field=field[len(prefix):]
                val=get_path_val(data,field)
                val=str(val)
                sheet.write(out_row_no,col_no,val,fmt)
            elif cell_type=="image":
                val=cell.get("value")
                path=utils.get_file_path(val)
                sheet.insert_image(out_row_no,col_no,path)
    out_row_no=0
    for tmpl_row_no in range(num_rows):
        row=nfjson_get_row(layout,tmpl_row_no)
        if row.get("field"):
            field=row["field"]
            val=get_path_val(data,field) or ""
            f=get_field_by_path(model,field)
            if not isinstance(f,(fields.One2Many,fields.Many2Many)):
                raise Exception("Can not loop on field: %s"%field)
            rmodel=f.relation
            for rdata in val:
                _render_row(rdata,rmodel,tmpl_row_no,out_row_no,field+".")
                out_row_no+=1
        else:
            _render_row(data,model,tmpl_row_no,out_row_no)
            out_row_no+=1
    workbook.close()
    out=open("/tmp/report.xlsx","rb").read()
    return out
